from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from bot_creating import dp, bot
from aiogram import types, Dispatcher
from aiogram.dispatcher.filters import Text
from database import sqlite_db
from keybuttons import admin_keys, client_keys, inline_keys

ID = None
EDITOR_MESSAGE = '''
–í—ã –≤–æ—à–ª–∏ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.
–í–æ–∑–º–æ–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –Ω–∏–∂–µ
ü¶ç –°–ª–∞–≤–∞ FUFO ü¶ç
'''

class FSMAdmin(StatesGroup):
    user_id = State()
    photo = State() # —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    name = State() # –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    residence = State() # –º–µ—Å—Ç–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–º—ã—à–ª–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥)
    nature = State() # —Ö–∞—Ä–∞–∫—Ç–µ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞


'''Entry into admin state'''
async def make_changes_command(callback: types.CallbackQuery, state: FSMContext):
    # global ID
    # ID = message.from_user.id
    print(callback.from_user.id)
    await bot.send_message(callback.from_user.id, EDITOR_MESSAGE, reply_markup=(inline_keys.inline_editor))
    await FSMAdmin.user_id.set()
    async with state.proxy() as data:
        data['user_id'] = callback.from_user.id
    await callback.answer()
    # await FSMAdmin.next()
    # await message.delete()

'''Out of admin state'''
async def cancle_handler(callback: types.CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    if current_state is not None:
        await state.finish()
    await bot.send_message(callback.from_user.id, 'üü† –†–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫—Ä—ã—Ç')
    # await callback.delete()

# @dp.message_handler(commands='Load', state=None)
async def charmake_create(callback: types.CallbackQuery):
    # if message.from_user.id == ID:
    idcheck = await sqlite_db.sql_lookfor_userid(callback)
    if idcheck is None:
        # await FSMAdmin.photo.set()
        await bot.send_message(callback.from_user.id, '–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞')
        await FSMAdmin.next()
    else:
        await callback.answer('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ.')


# @dp.message_handler(content_types=['photo'], state=FSMAdmin.photo)
async def load_photo(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['user_id'] = message.from_user.id
        data['photo'] = message.photo[0].file_id
    await FSMAdmin.next()
    await message.reply('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞')

# @dp.message_handler(state=FSMAdmin.name)
async def load_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
    await FSMAdmin.next()
    await message.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è (–ú–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–º—ã—à–ª–µ–Ω–Ω—ã–º, –Ω–µ –±–æ–ª–µ–µ 20 —Å–∏–º–≤–æ–ª–æ–≤)')

# @dp.message_handler(state=FSMAdmin.residence)
async def load_residence(message: types.Message, state: FSMContext):
    if len(message.text) < 21:
        async with state.proxy() as data:
            data['residence'] = message.text
        await FSMAdmin.next()
        await message.reply('–û–ø–∏—à–∏—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–ù–µ –±–æ–ª—å—à–µ 80 —Å–∏–º–≤–æ–ª–æ–≤)')
    else:
        await message.reply('üü° –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ 20 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')

# @dp.message_handler(state=FSMAdmin.nature)
async def load_nature(message: types.Message, state: FSMContext):
    if len(message.text) < 81:
        async with state.proxy() as data:
            data['nature'] = message.text
        
        await sqlite_db.sql_add_command(state)

        await bot.send_message(message.from_user.id, 'üü¢ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä–µ—à–µ–Ω–æ!', reply_markup=client_keys.kb_client)
        # print(data)
        await state.finish()
    else:
        await message.reply('üü° –•–∞—Ä–∞–∫—Ç–µ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ 80 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')

async def charmake_delete(callback: types.CallbackQuery):
    idcheck = await sqlite_db.sql_lookfor_userid(callback)
    if idcheck:
        await bot.send_message(callback.from_user.id, '–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞?', reply_markup=inline_keys.inline_yesno)
    else:
        await bot.send_message(callback.from_user.id, '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ù–æ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–∑–¥–Ω–æ –µ–≥–æ –≤–æ—Å—Å–æ–∑–¥–∞—Ç—å')
    

async def charmake_delete_yesno(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == 'yes_delete':
        await sqlite_db.sql_delete_command(callback)
        await bot.send_message(callback.from_user.id, '–í–∞—à —Ñ—É—Ñ–æ —É—à–µ–ª –Ω–∞ –ø–æ–∫–æ–π... üòî')
        await state.finish()
        await callback.answer()
    else:
        await bot.send_message(callback.from_user.id, '–í—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –∂–∏–∑–Ω—å –≤–∞—à–µ–º—É —Ñ—É—Ñ–æ')
        await callback.answer()
            
def register_handlers_admin(dp: Dispatcher):
    '''–í—Ö–æ–¥ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞'''
    dp.register_callback_query_handler(make_changes_command, Text('editor'), state=None)
    '''–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞'''
    dp.register_callback_query_handler(charmake_create, Text('create'), state=FSMAdmin.user_id)
    dp.register_message_handler(load_photo, content_types=['photo'], state=FSMAdmin.photo)
    dp.register_message_handler(load_name, state=FSMAdmin.name)
    dp.register_message_handler(load_residence, state=FSMAdmin.residence)
    dp.register_message_handler(load_nature, state=FSMAdmin.nature)
    '''–£–¥–∞–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞'''
    dp.register_callback_query_handler(charmake_delete, Text('delete'), state='*')
    dp.register_callback_query_handler(charmake_delete_yesno, Text(endswith='_delete'), state='*')
    '''–í—ã—Ö–æ–¥ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM'''
    dp.register_callback_query_handler(cancle_handler, Text('cancel'), state='*')
    # dp.register_message_handler(cancle_handler, Text(equals='abort', ignore_case=True), state='*')
    

